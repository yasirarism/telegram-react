{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","React","Component","render","animation","this","props","className","Animation","type","stretch","style","borderRadius","StickerSet","shouldComponentUpdate","nextProps","nextState","nextContext","info","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","StickersPickerHeader","constructor","super","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","componentDidMount","StickerStore","on","componentWillUnmount","off","componentDidUpdate","prevProps","prevState","snapshot","recent","recentItem","play","PICKER_HEADER","openMedia","ref","classNames","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","startPosition","element","diff","pos","clientUpdate","handleScroll","scrolling","now","Date","lastScrollTime","scrollTimer","clearTimeout","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","compareMaps","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","theme","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","Button","withTheme"],"mappings":"0XAYA,MAAMA,UAAyBC,IAAMC,UACjCC,SAAU,IACEC,EAAcC,KAAKC,MAAnBF,UACR,OAAKA,EAGD,yBAAKG,UAAU,mBACX,kBAACC,EAAA,EAAD,CACIC,KAAK,UACLC,SAAS,EACTN,UAAWA,EACXO,MAAO,CAAEC,aAAc,MARZ,MAmBhBZ,Q,0DCnBf,MAAMa,UAAmBZ,IAAMC,UAC3BY,sBAAsBC,EAAWC,EAAWC,GAGxC,OAFiBZ,KAAKC,MAAdY,OAEKH,EAAUG,KAO3Bf,SAAU,IAAD,EACgEE,KAAKC,MAAlEY,EADH,EACGA,KAAMC,EADT,EACSA,SAAUC,EADnB,EACmBA,YAAaC,EADhC,EACgCA,aAAcC,EAD9C,EAC8CA,cACnD,IAAKJ,EAAM,OAAO,KAFb,IAIGK,EAAoBL,EAApBK,MAEFC,EAFsBN,EAAbO,SAEQC,IAAI,CAACC,EAAGC,IAC3B,yBACIrB,UAAU,mBACVsB,IAAKF,EAAEG,QAAQC,GACfC,kBAAiBL,EAAEG,QAAQC,GAC3BE,QAAS,IAAMd,EAASQ,GACxBN,aAAcA,EACdD,YAAaA,EACbT,MAAO,CACHuB,MAAOC,KACPC,OAAQD,OAEZ,kBAACE,EAAA,EAAD,CACIR,IAAKF,EAAEG,QAAQC,GACfD,QAASH,EACTW,UAAU,EACVC,MAAM,EACNC,YAAaL,KACbM,SAAO,EACPC,OAAQC,IAAkBC,WAKtC,OACI,yBAAKrC,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,6BACX,8BAAOgB,IAEVD,GACG,kBAACuB,EAAA,EAAD,CACIC,aAAW,SACXC,QAAS,CAAEC,KAAM,yBACjBC,KAAK,QACLhB,QAASX,GACT,kBAAC,IAAD,CAAW4B,SAAS,cAIhC,yBAAK3C,UAAU,uBAAuBiB,KAavCX,Q,0CCnEf,MAAMsC,UAA6BlD,IAAMC,UACrCkD,YAAY9C,GACR+C,MAAM/C,GADS,KAiBnBgD,iCAAmCC,IAAW,IAClCC,EAAaD,EAAbC,SAGRnD,KAAKoD,SAAS,CAAED,cArBD,KA8BnBE,iBAAmB,KAAO,IACdF,EAAanD,KAAKsD,MAAlBH,SACAI,EAAmCvD,KAAnCuD,SAAUC,EAAyBxD,KAAzBwD,UAEZC,EAFqCzD,KAAd0D,UAEJC,QACnBC,EAASJ,EAAUG,QACnBE,EAAaC,cAAqBF,GAElCG,EAAaN,EAAOO,WACpBC,EAAsB,GAAXd,EAAgB,IAE3Be,EAAaC,OAAON,EAAWvD,MAAM8D,KAAKC,QAAQ,KAAM,KACxDC,EAAsB,GAAXnB,EAEbI,GACAA,EAASgB,OAGbvE,KAAKuD,SAAW,IAAIiB,IAAS,EAAG,CAC5B,CACIC,KAAMV,EACNW,GAAIT,EACJU,KAAMP,GAASX,EAAOO,WAAaI,GAEvC,CACIK,KACIG,KAAKC,IAAIP,EAAWJ,GAAc,IAC5BI,EAA8C,IAAnCM,KAAKE,KAAKR,EAAWJ,GAChCA,EACVQ,GAAIJ,EACJK,KAAMP,GAASP,EAAWvD,MAAM8D,KAAOA,EAAO,QAItDW,WAAW,KACF/E,KAAKuD,UAEVvD,KAAKuD,SAASyB,SACf,IApEY,KAwEnBC,YAAcC,IAAU,IACZxB,EAAc1D,KAAd0D,UAEa,IAAjBwB,EAAMC,SACSzB,EAAUC,QAElBK,YAAckB,EAAME,SA9EhB,KAkFnBC,aAAe5D,IAAY,IAAD,EACSzB,KAAKC,MAA5BmB,EADc,EACdA,UAGRN,EAJsB,EACJA,UAGTM,EAASkE,QAAQ7D,KAnF1BzB,KAAK0D,UAAY9D,IAAM2F,YACvBvF,KAAKwD,UAAY5D,IAAM2F,YAEvBvF,KAAKsD,MAAQ,CAAEH,SAAU,GAG7BqC,oBACIC,IAAaC,GAAG,iCAAkC1F,KAAKiD,kCAG3D0C,uBACIF,IAAaG,IAAI,iCAAkC5F,KAAKiD,kCAU5D4C,mBAAmBC,EAAWC,EAAWC,GACjCD,EAAU5C,WAAanD,KAAKsD,MAAMH,UAClCnD,KAAKqD,mBA+DbvD,SAAU,IAAD,EACwBE,KAAKC,MAA1BgG,EADH,EACGA,OAAQ7E,EADX,EACWA,SAEV8E,EAAaD,EACf,yBACI/F,UAAU,gCACV0B,QAAS,IAAM5B,KAAKqF,aAAa,WACjC,kBAAC,IAAD,OAEJ,KAEElE,EAAQC,EAASC,IAAIC,GACvB,kBAACU,EAAA,EAAD,CACIR,IAAKF,EAAEG,QAAQC,GACfxB,UAAU,iCACVuB,QAASH,EACT6E,MAAM,EACNlE,UAAU,EACVC,MAAM,EACNC,YAAa,GACbC,SAAO,EACPC,OAAQC,IAAkB8D,cAC1BC,UAAW,IAAMrG,KAAKqF,aAAa/D,MAI3C,OACI,yBAAKpB,UAAU,0BACX,yBAAKoG,IAAKtG,KAAK0D,UAAWxD,UAAWqG,IAAW,gCAAiC,qBAAsBC,QAASxG,KAAKiF,aACjH,yBAAK/E,UAAU,gCACVgG,EACA/E,GAEL,yBAAKmF,IAAKtG,KAAKwD,UAAWtD,UAAU,qCAazC4C,Q,4CClIf,MAAM2D,UAAuB7G,IAAMC,UAC/BkD,YAAY9C,GAAQ,IAAD,EACf+C,MAAM/C,GADS,YA4DnByG,6BAA+BxD,IAAW,IAC9ByD,EAA8BzD,EAA9ByD,SAA8BzD,EAApB0D,gBACbD,GAEL3G,KAAK6G,cAhEU,KAmEnBC,uBAAyB5D,IACrBlD,KAAK+G,uBApEU,KAsFnBC,UAAY,KACRhH,KAAK0D,UAAUC,QAAQqD,UAAY,GAvFpB,KA0FnBC,YA1FmB,uCA0FL,WAAOhB,EAAQiB,EAAaC,GAA5B,qBAAAC,EAAA,yDAGLnB,EAHK,gCAISoB,IAAgBC,KAAK,CAChC,QAAS,oBACTC,aAAa,IANX,OAINtB,EAJM,iBAULkB,EAVK,iCAWeE,IAAgBC,KAAK,CACtC,QAAS,0BACTX,UAAU,IAbR,cAWAa,EAXA,OAgBAC,EAAW,GACjBD,EAAOL,KAAKO,QAAQpG,IAChBmG,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQtG,EAAEI,QArBhB,UA0BOmG,QAAQC,IAAIL,GA1BnB,QA0BNN,EA1BM,eA6BJY,EAAaZ,EAAKa,MAAM,EAAG,GAC3BC,EAAiBd,EAAKe,OAAO,CAAC9F,EAAS+F,KACrCA,EAAI/G,SAASgH,OAAS,GACtBhG,EAAQuF,KAAKQ,EAAI/G,SAAS,IAEvBgB,GACR,IAEH,EAAKgB,SAAS,CACV6C,SACAiB,cACAC,KAAMY,EACNM,SAAUlB,EACVc,mBAEJ,EAAKK,WAAaP,EAAWK,OA5CnB,4CA1FK,+DAyInBG,0BAA4B,KACxBvI,KAAKwI,qBA1IU,KA6InBC,6BAA+B,KAC3BzI,KAAKwI,kBAAkB,MA9IR,KAiJnBA,kBAAoB,CAACE,EAAU,KAE3B,IAAMjF,EAASzD,KAAK0D,UAAUC,QAEtBwD,EAASnH,KAAKsD,MAAd6D,KAEFwB,EAAc,GACpBxB,EAAKO,QAAQpG,IACT,IAAMsH,EAAO5I,KAAK6I,SAASC,IAAIxH,EAAEI,IAC3BqH,EAAOjF,cAAqB8E,GAClC,GAAIG,EAAM,CACN,IAAMC,EAAYvF,EAAOuD,UAAY0B,EAC/BO,EAAexF,EAAOuD,UAAYvD,EAAOyF,aAAeR,EAExDS,EAAUJ,EAAKK,UACfC,EAAaN,EAAKK,UAAYL,EAAKO,cAErCH,GAAWH,GAAaD,EAAKK,WAAaH,GAEnCI,GAAcL,GAAaK,GAAcJ,GAEzCE,GAAWH,GAAaK,GAAcJ,IAH7CN,EAAYhB,KAAKrG,MAS7BqH,EAAYjB,QAAQpG,IAChB,IAAMiI,EAAQC,IAAUC,WACnBzJ,KAAK0J,WAAWC,IAAIrI,EAAEI,MACvB1B,KAAK0J,WAAWvB,IAAI7G,EAAEI,GAAIJ,EAAEI,IAC5BkI,YAAsBL,EAAOjI,OAhLtB,KAqLnBuI,eAAiB,KACb,IAAMpG,EAASzD,KAAK0D,UAAUC,QADX,EAGM3D,KAAKsD,MAAtB2C,EAHW,EAGXA,OAAQkB,EAHG,EAGHA,KACZ2C,EAAUrG,EAAOsG,aACjB5G,EAAW,EACX6G,EAAgB,EACpB,GAAI/D,GAAUA,EAAO7E,SAASgH,OAAS,EAAG,CACtC4B,EAAgB,EAChB,IAAMC,EAAUjK,KAAK6I,SAASC,IAAI,UAClC,GAAImB,EAAS,CACT,IAAMlB,EAAOjF,cAAqBmG,GAClC,GAAIlB,GAAQA,EAAKK,WAAa3F,EAAOuD,UAAW,CAC5C,IAAMoC,EAAYL,EAAKK,UACvB,GAAIL,GAAQK,GAAa3F,EAAOuD,UAAW,CACvC,IAAMkD,EAAOtF,KAAKC,IAAIpB,EAAOuD,UAAYoC,GACrCc,GAAQJ,IACRA,EAAUI,EACV/G,EAAW,MAM/BgE,EAAKO,QAAQ,CAACpG,EAAG6I,KACb,IAAMF,EAAUjK,KAAK6I,SAASC,IAAIxH,EAAEI,IACpC,GAAIuI,EAAS,CACT,IAAMlB,EAAOjF,cAAqBmG,GAClC,GAAIlB,GAAQA,EAAKK,WAAa3F,EAAOuD,UAAW,CAC5C,IAAMoC,EAAYL,EAAKK,UACvB,GAAIL,EAAM,CACN,IAAMmB,EAAOtF,KAAKC,IAAIpB,EAAOuD,UAAYoC,GACrCc,GAAQJ,IACRA,EAAUI,EACV/G,EAAW6G,EAAgBG,QAO/C9C,IAAgB+C,aAAa,CACzB,QAAS,iCACTjH,cAhOW,KAoOnBkH,aApOmB,sBAoOJ,0CAAAjD,EAAA,yDACX,EAAKkD,WAAY,EACXC,EAAM,IAAIC,KAChB,EAAKC,eAAiBF,EAClB,EAAKG,aAAaC,aAAa,EAAKD,aACxC,EAAKA,YAAc3F,WAAW,KACtBwF,IAAQ,EAAKE,iBAEjB,EAAKH,WAAY,IAClB,KAIH,EAAK7B,+BACL,EAAKoB,iBAECpG,EAAS,EAAKC,UAAUC,SAE1B,EAAKiH,aAlBE,sDAoBPC,GAAY,EACZpH,EAAOuD,UAAYvD,EAAOyF,cAAgBzF,EAAOsG,aAAe,MAChEc,GAAY,GAGXA,EAzBM,2CA0BA,GA1BA,aA6BmB,EAAKvH,MAA3B6D,EA7BG,EA6BHA,MAAMD,EA7BH,EA6BGA,aACEC,KAAKiB,SAAWjB,EAAKiB,OA9B1B,0DAgCX,EAAKwC,cAAe,EACdnD,EAAW,GACjBP,EAAYC,KAAKa,MAAM,EAAKM,WAAY,EAAKA,WAAa,GAAGZ,QAAQpG,IACjEmG,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQtG,EAAEI,QAtCX,UA2CUmG,QAAQC,IAAIL,GAAUqD,QAAQ,KAC/C,EAAKF,cAAe,IA5Cb,QA2CLpD,EA3CK,OA+CX,EAAKc,YAAcd,EAAOY,OAC1B,EAAKhF,SAAS,CAAE+D,KAAMA,EAAK4D,OAAOvD,KAhDvB,4CApOI,KAuRnBwD,mBAAqBC,IAAc,IAAD,EACLjL,KAAKsD,MAAtB2C,EADsB,EACtBA,OAAQkB,EADc,EACdA,KAEV1F,EAAUyJ,YAAY,CAACjF,GAAQ8E,OAAO5D,IAAOgE,KAAK7J,GAAKA,EAAEG,QAAQC,KAAOuJ,GAC9E,GAAKxJ,EAAL,CAEA,IAAM8H,EAAQC,IAAUC,WACxB2B,YAAmB7B,EAAO9H,EAAS,MAGX4J,YAA4B5J,EAAS0F,EADtC,GAEPO,QAAQpG,IACpB8J,YAAmB7B,EAAOjI,EAAG,UAnSlB,KAuSnBgK,iBAAmBpG,IACf,IAAM+F,EAAY9G,OAAOe,EAAMqG,cAAcC,QAAQP,WACrD,GAAKA,GAEAjL,KAAKyL,UAAV,CAEIzL,KAAK0L,qBAAuBT,IAC5BjL,KAAK0L,mBAAqB,MAE9B1L,KAAKoD,SAAS,CAAEuI,iBAAkBV,IAClCjL,KAAKgL,mBAAmBC,GAVA,IAYhBW,EAAc5L,KAAKC,MAAnB2L,UAZgB,EAaC5L,KAAKsD,MAAtB2C,EAbgB,EAahBA,OAAQkB,EAbQ,EAaRA,KAGhByE,EADgBV,YAAY,CAACjF,GAAQ8E,OAAO5D,IAAOgE,KAAK7J,GAAKA,EAAEG,QAAQC,KAAOuJ,MAtT/D,KA0TnBY,gBAAkB3G,IACd,IAAM+F,EAAY9G,OAAOe,EAAMqG,cAAcC,QAAQP,WACrD,GAAKA,EAAL,CAEAjL,KAAK0L,mBAAqBT,EAC1B,IAAMV,EAAMC,KAAKD,MAuBjB,OArBAvK,KAAKoD,SAAS,CAAEuI,iBAAkBV,EAAWa,UAAWvB,EAAKwB,aAAa,EAAOC,YAAY,IAC7FjH,WAAW,KACe/E,KAAKsD,MAAnBwI,YACUvB,GACdvK,KAAKoD,SAAS,CAAE2I,aAAa,EAAMC,YAAY,GAAQ,KAAO,IAClDJ,EAAc5L,KAAKC,MAAnB2L,UADiD,EAEhC5L,KAAKsD,MAAtB2C,EAFiD,EAEjDA,OAAQkB,EAFyC,EAEzCA,KAGhByE,EADgBV,YAAY,CAACjF,GAAQ8E,OAAO5D,IAAOgE,KAAK7J,GAAKA,EAAEG,QAAQC,KAAOuJ,OAIvF,KAEHjL,KAAKgL,mBAAmBC,GAExBjL,KAAKyL,WAAY,EACjBQ,SAASC,iBAAiB,UAAWlM,KAAKmM,eAE1CjH,EAAMkH,iBACNlH,EAAMmH,mBACC,IAtVQ,KAyVnBF,cAAgB,KACZnM,KAAKoD,SAAS,CAAEuI,iBAAkB,EAAGG,UAAW,EAAGC,aAAa,KAIhEH,EAFsB5L,KAAKC,MAAnB2L,WAEE,MAEV5L,KAAKyL,WAAY,EACjBQ,SAASK,oBAAoB,UAAWtM,KAAKmM,gBAjW9B,KAoWnBI,oBAAsB9K,IAAY,IACtBX,EAAad,KAAKC,MAAlBa,SACed,KAAKsD,MAApB0I,YAIRlL,EAASW,IA1WM,KA6WnB+K,gBA7WmB,uCA6WD,WAAMrJ,GAAN,+BAAAiE,EAAA,2DACgB,EAAK9D,MAA3B6D,EADM,EACNA,KAAMD,EADA,EACAA,YACNxD,EAAc,EAAdA,WAEU,IAAdP,EAJU,gBAKKO,EAAUC,QAClBqD,UAAY,EANT,4BAOH7D,EAAWgE,EAAKiB,QAPb,kBAQJ6B,EAAU,EAAKpB,SAASC,IAAI3B,EAAKhE,GAAUzB,OAEvCqH,EAAOjF,cAAqBmG,MAEfvG,EAAUC,QAClBqD,UAAY+B,EAAKK,WAbtB,6BAgBHjG,EAAW+D,EAAYC,KAAKiB,QAhBzB,qBAiBN,EAAKwC,aAjBC,sDAkBN1D,EAAYC,KAAKiB,SAAWjB,EAAKiB,OAlB3B,0DAoBV,EAAKwC,cAAe,EACdnD,EAAW,GACjBP,EAAYC,KAAKa,MAAM,EAAKM,WAAYnF,EAAW,GAAGuE,QAAQpG,IAC1DmG,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQtG,EAAEI,QA1BZ,UA+BWmG,QAAQC,IAAIL,GAAUqD,QAAQ,IAAO,EAAKF,cAAe,GA/BpE,QA+BJpD,EA/BI,OAiCV,EAAKc,YAAcd,EAAOY,OACtBqE,EAAatF,EAAK4D,OAAOvD,GAC7B,EAAKpE,SAAS,CAAE+D,KAAMsF,GAAc,KAC5BtJ,EAAWsJ,EAAWrE,QACtB,EAAKoE,gBAAgBrJ,KArCnB,4CA7WC,2DAwZnBuJ,mBAAqB,KACjBrF,IAAgBC,KAAK,CACjB,QAAS,sBACTC,aAAa,KA3ZF,KA+ZnBoF,uBAAyBjL,IACrB2F,IAAgBC,KAAK,CACjB,QAAS,mBACTM,OAAQlG,EACRkL,cAAc,KAhalB5M,KAAK0D,UAAY9D,IAAM2F,YACvBvF,KAAK6I,SAAW,IAAIgE,IACpB7M,KAAK0J,WAAa,IAAImD,IAEtB7M,KAAKsD,MAAQ,CACT2C,OAAQ,KACRiB,YAAa,KACbC,KAAM,GACNc,eAAgB,GAChB9E,SAAU,GAGdnD,KAAKyI,6BAA+BqE,YAAS9M,KAAKyI,6BAA8B,KAChFzI,KAAKuI,0BAA4BwE,YAAS/M,KAAKuI,0BAA2B,KAC1EvI,KAAK6J,eAAiBkD,YAAS/M,KAAK6J,eAAgB,KAGxDpJ,sBAAsBC,EAAWC,EAAWC,GAAc,IAAD,EACQZ,KAAKsD,MAA1DH,EAD6C,EAC7CA,SAAU8C,EADmC,EACnCA,OAAQiB,EAD2B,EAC3BA,YAAaC,EADc,EACdA,KAAM4E,EADQ,EACRA,YAE7C,OAAIpL,EAAUsF,SAAWA,IAIrBtF,EAAUuG,cAAgBA,IAI1BvG,EAAUwG,OAASA,IAInBxG,EAAUoL,cAAgBA,GAI1BpL,EAAUwC,WAAaA,KAO/BqC,oBACIC,IAAaC,GAAG,6BAA8B1F,KAAK0G,8BACnDjB,IAAaC,GAAG,uBAAwB1F,KAAK8G,wBAGjDnB,uBACIF,IAAaG,IAAI,6BAA8B5F,KAAK0G,8BACpDjB,IAAaG,IAAI,uBAAwB5F,KAAK8G,wBAGlDvC,QAeAsC,WAAWD,GAAkB,IAAD,EACM5G,KAAKsD,MADX,EAChB6D,KADgB,EACVD,YAGZH,sBAAuB,IAAD,wIACHM,IAAgBC,KAAK,CACtC,QAAS,oBACTC,aAAa,IAHO,OAClBtB,EADkB,OAMxB,EAAK7C,SAAS,CACV6C,WAPoB,6CA4V5BnG,SAAU,IAAD,EACgBE,KAAKC,MAAlB+M,EADH,EACGA,EAAG1M,EADN,EACMA,MADN,EAEiDN,KAAKsD,MAAnD2C,EAFH,EAEGA,OAAqBkB,GAFxB,EAEWD,YAFX,EAEwBC,MAAMc,EAF9B,EAE8BA,eAOnCjI,KAAK6I,SAASoE,QACd,IAAM9L,EAAQgG,EAAK9F,IAAIC,GACnB,kBAAC,EAAD,CACIE,IAAKF,EAAEI,GACP4E,IAAK4G,GAAMlN,KAAK6I,SAASV,IAAI7G,EAAEI,GAAIwL,GACnCrM,KAAMS,EACNR,SAAUd,KAAKuM,oBACfxL,YAAaf,KAAK6L,gBAClB7K,aAAchB,KAAKsL,oBAIrB6B,EACFlH,GAAUA,EAAO7E,SAASgH,OAAS,EAC7B,CACIhH,SAAU6E,EAAO7E,SACjBF,MAAO8L,EAAE,mBAEb,KAEV,OACI,yBAAK9M,UAAU,kBAAkBI,MAAOA,GACpC,kBAAC,EAAD,CACI2F,OAAQkH,EACR/L,SAAU6G,EACVnH,SAAUd,KAAKwM,kBACnB,yBAAKlG,IAAKtG,KAAK0D,UAAWxD,UAAWqG,IAAW,yBAA0B,qBAAsB6G,SAAUpN,KAAKqK,cAC1GgD,QAAQF,IACL,kBAAC,EAAD,CACI7G,IAAK4G,GAAMlN,KAAK6I,SAASV,IAAI,SAAU+E,GACvCrM,KAAMsM,EACNrM,SAAUd,KAAKuM,oBACfxL,YAAaf,KAAK6L,gBAClB7K,aAAchB,KAAKsL,iBACnBrK,cAAejB,KAAK0M,qBAG3BvL,KAYrB,IAMemM,EANCC,YACZC,cACAC,cACAC,cAGWJ,CAAQ7G,G,gBC3evB,MAAMkH,UAAmB/N,IAAMC,UAE3BkD,YAAY9C,GACR+C,MAAM/C,GADS,KAsBnBoK,aAAenF,IAAU,IAAD,EAC8BlF,KAAK0D,UAAUC,QAAzDqD,EADY,EACZA,UAAW+C,EADC,EACDA,aAAcb,EADb,EACaA,aAEjClJ,KAAKyI,+BAEL,IAAMmF,EAAQ5G,GAAa,GACrB6G,EAAM9D,GAAgB/C,EAAYkC,IAAiB,GACnD4E,EAASlJ,KAAKC,IAAImC,EAAYhH,KAAK+N,eAAiB,KAAOH,IAAUC,EAG3E7N,KAAK+N,cAAgB/G,EACjB8G,GAKJ9N,KAAKwI,qBAtCU,KAyCnBxB,UAAY,KACRhH,KAAK0D,UAAUC,QAAQqD,UAAY,GA1CpB,KAyEnBuB,0BAA4B,KACxBvI,KAAKwI,qBA1EU,KA6EnBC,6BAA+B,KAC3BzI,KAAKwI,qBA9EU,KAiFnBA,kBAAoB,CAACE,EAAU,KAE3B,IAAMjF,EAASzD,KAAK0D,UAAUC,QAEtBqK,EAAoBC,IAApBD,gBACR,GAAKA,EAAL,CALiC,IAOzBE,EAAeF,EAAfE,WAEFC,EAAY,IAAItB,IAChBuB,EAAgB,GACtBF,EAAWxG,QAAQ,CAACpG,EAAG+M,KACnB,IAAMzF,EAAO5I,KAAK6I,SAASC,IAAd,UAAqBuF,EAArB,YAA8B/M,EAAEvB,UAAU2B,KACjDqH,EAAOjF,cAAqB8E,GAClC,GAAIG,EAAM,CACN,IAAMC,EAAYvF,EAAOuD,UAAY0B,EAC/BO,EAAexF,EAAOuD,UAAYvD,EAAOyF,aAAeR,EAExDS,EAAUJ,EAAKK,UACfC,EAAaN,EAAKK,UAAYL,EAAKO,cAErCH,GAAWH,GAAaD,EAAKK,WAAaH,GAGnCI,GAAcL,GAAaK,GAAcJ,GAGzCE,GAAWH,GAAaK,GAAcJ,KAL7CkF,EAAUhG,IAAI7G,EAAGA,GACjB8M,EAAczG,KAAK0G,OAvBE,IAkCzBC,EAAqBL,IAArBK,iBACJC,YAAYD,EAAkBH,IAOlC9G,IAAgB+C,aAAa,CACzB,QAAS,+BACT8D,WAAYC,MA7HD,KAyInBtC,gBAAkB3G,IACd,IAAM+F,EAAY9G,OAAOe,EAAMqG,cAAcC,QAAQgD,gBAErDxO,KAAK0L,mBAAqBT,EAC1B,IAAMV,EAAMC,KAAKD,MAyBjB,OAvBAvK,KAAKoD,SAAS,CAAEuI,iBAAkBV,EAAWa,UAAWvB,EAAKwB,aAAa,EAAOC,YAAY,IAC7FjH,WAAW,KACe/E,KAAKsD,MAAnBwI,YACUvB,GACdvK,KAAKoD,SAAS,CAAE2I,aAAa,EAAMC,YAAY,GAAQ,KAAO,IAClDJ,EAAc5L,KAAKC,MAAnB2L,UADiD,EAEhC5L,KAAKsD,MAF2B,EAEjD2C,OAFiD,EAEzCkB,KAKhByE,EAH4BqC,IAApBD,gBAEwBE,WAAWjD,OAIpD,KAIHjL,KAAKyL,WAAY,EACjBQ,SAASC,iBAAiB,UAAWlM,KAAKmM,eAE1CjH,EAAMkH,iBACNlH,EAAMmH,mBACC,GAtKQ,KAyKnBf,iBAAmBpG,IACf,IAAM+F,EAAY9G,OAAOe,EAAMqG,cAAcC,QAAQgD,gBAEhDxO,KAAKyL,YAENzL,KAAK0L,qBAAuBT,IAC5BjL,KAAK0L,mBAAqB,MAE9B1L,KAAKoD,SAAS,CAAEuI,iBAAkBV,KAOlCW,EAJsB5L,KAAKC,MAAnB2L,WACoBqC,IAApBD,gBAEwBE,WAAWjD,MAvL5B,KA2LnBkB,cAAgB,KACZnM,KAAKoD,SAAS,CAAEuI,iBAAkB,EAAGG,UAAW,EAAGC,aAAa,KAIhEH,EAFsB5L,KAAKC,MAAnB2L,WAEE,MAEV5L,KAAKyL,WAAY,EACjBQ,SAASK,oBAAoB,UAAWtM,KAAKmM,gBAnM9B,KAsMnBsC,cAAgB1O,IAAc,IAClBe,EAAad,KAAKC,MAAlBa,SACed,KAAKsD,MAApB0I,YAIRlL,EAASf,IAzMTC,KAAK0D,UAAY9D,IAAM2F,YAEvBvF,KAAK6I,SAAW,IAAIgE,IAEpB7M,KAAKuI,0BAA4BwE,YAAS/M,KAAKuI,0BAA2B,KAC1EvI,KAAKyI,6BAA+BqE,YAAS9M,KAAKyI,6BAA8B,KAGpFzD,QACIhF,KAAKwI,oBAGTjE,OACI8C,IAAgB+C,aAAa,CACzB,QAAS,+BACT8D,WAAY,IAAIrB,MA2BlB5F,cAAe,IAAD,+HAGV+G,EAAoBC,IAApBD,gBAHU,gCAKS3G,IAAgBC,KAAK,CACtC,QAAS,uBAND,OAKNE,EALM,OASZyG,IAAeD,gBAAkBxG,EACjCwG,EAAkBxG,EAElB,EAAKkH,YAAY,KACb,EAAK1J,UAbG,OAkBVuE,EAAQC,IAAUC,WACEuE,EAAgBE,WAAWlG,MAAM,EAAG,KAG5CN,QAAQpG,IACtBqN,YAA8BpF,EAAOjI,EAAG,MACxCsN,YAAqBrF,EAAOjI,EAAG,MAAM,KAxBzB,8CAkKpBxB,SAAU,IAAD,EACgBE,KAAKC,MAAfK,GADN,EACG0M,EADH,EACM1M,OACH0N,EAAoBC,IAApBD,gBACR,IAAKA,EAAiB,OAAO,KAE7BhO,KAAK6I,SAASoE,QACd,IAAM9L,EAAQ6M,EAAgBE,WAAW7M,IAAI,CAACC,EAAG+M,IAC7C,yBACIQ,uBAAsBR,EACtB7M,IAAG,UAAK6M,EAAL,YAAc/M,EAAEvB,UAAU2B,IAC7B4E,IAAK4G,GAAMlN,KAAK6I,SAASV,IAAd,UAAqBkG,EAArB,YAA8B/M,EAAEvB,UAAU2B,IAAMwL,GAC3DnM,YAAaf,KAAK6L,gBAClB7K,aAAchB,KAAKsL,kBAEnB,kBAACnL,EAAA,EAAD,CACIC,KAAK,SACLL,UAAWuB,EACX+E,UAAW,IAAMrG,KAAKyO,cAAcnN,GACpChB,MAAO,CAAEuB,MAAO,IAAKE,OAAQ,IAAK+M,OAAQ,EAAGvO,aAAc,OAKvE,OACI,yBAAKL,UAAU,cAAcI,MAAOA,GAChC,yBAAKgG,IAAKtG,KAAK0D,UAAWxD,UAAWqG,IAAW,qBAAsB,qBAAsB6G,SAAUpN,KAAKqK,cACtGlJ,KAarB,IAMemM,EANCC,YACZC,cACAC,cACAC,cAGWJ,CAAQK,G,uBCnPvB,MAAMoB,UAA0BnP,IAAMC,UAClCkD,YAAY9C,GAAQ,IAAD,EACf+C,MAAM/C,GADS,YAuBnB+O,qBAAuB9L,IACFlD,KAAKsD,MAAd2L,KAGJjP,KAAKkP,cAAe,EAEpBlP,KAAKmP,OAAS,MA7BH,KAiCnBC,uBAAyBlK,IACrBlF,KAAKqP,aAAc,EACnBtK,WAAW,KACP,GAAK/E,KAAKqP,cAEVrP,KAAKsP,cAAa,GAClBtP,KAAKuP,kBACLvP,KAAKwP,sBAEkB,IAAnBxP,KAAKsD,MAAMmM,KAAW,CACtB,IAAMC,EAAa1P,KAAK2P,cAAchM,QAClC+L,GACAA,EAAW1K,UAGpB4K,MAhDY,KAmDnBJ,oBAnDmB,sBAmDG,gCAAApI,EAAA,yDACZ4G,EAAoBC,IAApBD,gBADY,gCAGO3G,IAAgBC,KAAK,CACtC,QAAS,uBAJC,OAGRE,EAHQ,OAOdyG,IAAeD,gBAAkBxG,EACjCwG,EAAkBxG,EARJ,OAYZ+B,EAAQC,IAAUC,WACEuE,EAAgBE,WAAWlG,MAAM,EAAG,KAG5CN,QAAQpG,IACtBqN,YAA8BpF,EAAOjI,KAjBvB,4CAnDH,KAwEnBiO,gBAxEmB,sBAwED,gCAAAnI,EAAA,0DACV,EAAKD,KADK,iEAGME,IAAgBC,KAAK,CACrC,QAAS,oBACTC,aAAa,IALH,cAGd,EAAKtB,OAHS,gBAQWoB,IAAgBC,KAAK,CAC1C,QAAS,0BACTX,UAAU,IAVA,cAQd,EAAKO,YARS,OAaRO,EAAW,GACjB,EAAKP,YAAYC,KAAKO,QAAQpG,IAC1BmG,EAASE,KACLN,IAAgBC,KAAK,CACjB,QAAS,gBACTM,OAAQtG,EAAEI,QAlBR,UAuBImG,QAAQC,IAAIL,GAvBhB,QAuBd,EAAKN,KAvBS,OAyBR4B,EAAO,EAAK8G,kBAAkBlM,QAE9B4F,EAAQC,IAAUC,WACxBqG,YAA0BvG,EAAO,EAAKtD,QAElB,EAAKkB,KAAKa,MAAM,EAAG,GAAG+H,UAC9BrI,QAAQpG,IAChBsI,YAAsBL,EAAOjI,GAC7ByH,EAAKW,WAAWvB,IAAI7G,EAAEI,GAAIJ,EAAEI,MAGR,EAAKyF,KAAKe,OAAO,CAAC9G,EAAU+G,KAC5CA,EAAI/G,SAASgH,OAAS,GACtBhH,EAASuG,KAAKQ,EAAI/G,SAAS,IAExBA,GACR,IACasG,QAAQpG,IACpB0O,YAA4BzG,EAAOjI,KA3CzB,4CAxEC,KAuHnB2O,uBAAyB,KACrBjQ,KAAKqP,aAAc,EACnBtK,WAAW,KACP/E,KAAKkQ,kBACNN,MA3HY,KA8HnBM,eAAiB,KAAM,MAGYlQ,KAAKsD,MAA5BvD,EAHW,EAGXA,UAAW0B,EAHA,EAGAA,QACfzB,KAAKmQ,YAAcnQ,KAAKqP,aAAe5N,GAAW1B,GAEtDC,KAAKsP,cAAa,IApIH,KAuInBc,sBAAwB,KACpBpQ,KAAKmQ,YAAa,GAxIH,KA2InBE,sBAAwB,KAGpBrQ,KAAKmQ,YAAa,EAClBpL,WAAW,KACP/E,KAAKkQ,kBACNN,MAjJY,KAoJnBN,aAAeL,IACXjP,KAAKoD,SAAS,CAAE6L,QAAQ,KACpB,IAAKjP,KAAKsD,MAAM2L,KAAM,CACdjP,KAAKkP,eACLlP,KAAKmP,OAAS,KACdnP,KAAKkP,cAAe,GAGxB,IAAMQ,EAAa1P,KAAK2P,cAAchM,QAClC+L,GACAA,EAAWnL,WA9JR,KAoKnB+L,iBAAmB,KACftQ,KAAKoD,SAAS,CAAEqM,IAAK,IAErB,IAAMC,EAAa1P,KAAK2P,cAAchM,QAClC+L,GACAA,EAAWnL,OAGf,IAAMgM,EAAiBvQ,KAAK6P,kBAAkBlM,QAC1C4M,GACAA,EAAehM,QA9KJ,KAkLnBiM,oBAAsB,KAClB,IAAMD,EAAiBvQ,KAAK6P,kBAAkBlM,QAKlC,IAJI3D,KAAKsD,MAAbmM,IAKAc,GACAA,EAAevJ,aAGnBjC,WAAW,KAEPwL,EAAetJ,YAAYjH,KAAKiG,OAAQjG,KAAKkH,YAAalH,KAAKmH,OAChE,KAEHnH,KAAKoD,SAAS,CAAEqM,IAAK,KAGzB,IAAMC,EAAa1P,KAAK2P,cAAchM,QAClC+L,GACAA,EAAWnL,QAvMA,KA2MnBkM,gBAAkB,KACd,IAAMf,EAAa1P,KAAK2P,cAAchM,QAGtC,GAAY,IAFI3D,KAAKsD,MAAbmM,IAGAC,GACAA,EAAW1I,gBAEZ,CAAC,IACIgH,EAAoBC,IAApBD,gBAERjJ,WAAW,KACP2K,EAAWzI,YAAY+G,GACvB0B,EAAW1K,SACZ,KAEHhF,KAAKoD,SAAS,CAAEqM,IAAK,IAGzB,IAAMc,EAAiBvQ,KAAK6P,kBAAkBlM,QAC1C4M,GACAA,EAAehM,QAhOJ,KAoOnBmM,kBAAoBjP,IACXA,IAEL4F,IAAgB+C,aAAa,CACzB,QAAS,0BACT3I,YAGJzB,KAAKsP,cAAa,KA5OH,KA+OnBqB,qBAAuBlP,IACnBzB,KAAKoD,SAAS,CAAE3B,YAChB4F,IAAgB+C,aAAa,CACzB,QAAS,6BACT3I,YAGCA,GACDzB,KAAKkQ,kBAvPM,KA2PnBU,cAAgB7Q,IACPA,IAELsH,IAAgB+C,aAAa,CACzB,QAAS,4BACTrK,cAGJC,KAAKsP,cAAa,KAnQH,KAsQnBuB,iBAAmB9Q,IACfC,KAAKoD,SAAS,CAAErD,cAChBsH,IAAgB+C,aAAa,CACzB,QAAS,+BACTrK,cAGCA,GACDC,KAAKkQ,kBA3QTlQ,KAAKsD,MAAQ,CACT2L,MAAM,EACNQ,IAAK,GAGTzP,KAAK8Q,eAAiBlR,IAAM2F,YAC5BvF,KAAK6P,kBAAoBjQ,IAAM2F,YAC/BvF,KAAK2P,cAAgB/P,IAAM2F,YAG/BC,oBACIuL,IAASrL,GAAG,0BAA2B1F,KAAKgP,sBAC5CgC,IAAkBtL,GAAG,6BAA8B1F,KAAKgP,sBAG5DrJ,uBACIoL,IAASnL,IAAI,0BAA2B5F,KAAKgP,sBAC7CgC,IAAkBpL,IAAI,6BAA8B5F,KAAKgP,sBA8P7DlP,SAAU,IAAD,EACgBE,KAAKC,MAAlBgR,EADH,EACGA,MAAOjE,EADV,EACUA,EADV,EAEqChN,KAAKsD,MAAvC2L,EAFH,EAEGA,KAAMQ,EAFT,EAESA,IAAK1P,EAFd,EAEcA,UAAW0B,EAFzB,EAEyBA,QAE9B,GAAIwN,IAASjP,KAAKmP,OAAQ,CACtB,IAAM+B,EAAO,CACTC,OAAQnE,EAAE,UACVoE,SAAUpE,EAAE,iBACZqE,SAAUrE,EAAE,yBACZsE,WAAY,CACRH,OAAQnE,EAAE,iBACV/G,OAAQ+G,EAAE,UACVuE,OAAQvE,EAAE,iBACVwE,OAAQxE,EAAE,iBACVyE,MAAOzE,EAAE,aACT0E,SAAU1E,EAAE,YACZ2E,OAAQ3E,EAAE,gBACV4E,QAAS5E,EAAE,WACX6E,QAAS7E,EAAE,WACX8E,MAAO9E,EAAE,SACT+E,OAAQ/E,EAAE,YAIlBhN,KAAKmP,OACD,kBAAC,IAAD,CACI7I,IAAKtG,KAAK8Q,eAEV3I,IAAI,QACJ4D,aAAa,EACbiG,eAAe,EACflR,SAAUd,KAAKC,MAAMa,SACrBmR,MAAOhB,EAAMiB,QAAQC,QAAQC,KAC7BlB,KAAMA,EACNmB,OAAQC,cACRhS,MAAO,CAAEuB,MAAO,IAAK0Q,UAAW,SAAUpP,SAAU,WAAYiB,KAAM,EAAGoO,IAAK,KAItFxS,KAAKuQ,eACD,kBAAC,EAAD,CACIjK,IAAKtG,KAAK6P,kBACV/O,SAAUd,KAAK0Q,kBACf9E,UAAW5L,KAAK2Q,qBAChBrQ,MAAO,CAAE6C,SAAU,WAAYiB,KAAM,IAAKoO,IAAK,KAIvDxS,KAAK0P,WACD,kBAAC,EAAD,CACIpJ,IAAKtG,KAAK2P,cACV7O,SAAUd,KAAK4Q,cACfhF,UAAW5L,KAAK6Q,iBAChBvQ,MAAO,CAAEuB,MAAO,IAAK0Q,UAAW,SAAUpP,SAAU,WAAYiB,KAAM,IAAKoO,IAAK,KAK5F,OACI,oCACI,0BACIC,IAAI,aACJrS,KAAK,WACLsS,KAA6B,SAAvBzB,EAAMiB,QAAQ9R,KAAkB,sBAAwB,yBAElE,kBAACoC,EAAA,EAAD,CACItC,UAAU,uBACVuC,aAAW,WACXzB,aAAchB,KAAKoP,uBACnBuD,aAAc3S,KAAKiQ,wBACnB,kBAAC,IAAD,OAEJ,yBACI/P,UAAWqG,IAAW,oBAAqB,CAAE,2BAA4B0I,IACzEjO,aAAchB,KAAKoQ,sBACnBuC,aAAc3S,KAAKqQ,uBACnB,yBAAKnQ,UAAWqG,IAAW,uBAAwB,CAAE,gCAAyC,IAARkJ,GAAa,CAAE,4BAAqC,IAARA,KAC7HzP,KAAKmP,OACLnP,KAAKuQ,eACLvQ,KAAK0P,YAEV,yBAAKxP,UAAU,uBACX,kBAAC0S,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BvP,UAAU,6BACV0B,QAAS5B,KAAKsQ,kBACbtD,EAAE,UAEP,kBAAC4F,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BvP,UAAU,6BACV0B,QAAS5B,KAAKwQ,qBACbxD,EAAE,qBAEP,kBAAC4F,EAAA,EAAD,CACIX,MAAe,IAARxC,EAAY,UAAY,UAC/BvP,UAAU,6BACV0B,QAAS5B,KAAKyQ,iBACbzD,EAAE,gBAIdK,QAAQ5L,IAAY,kBAAC,IAAD,CAAgBA,QAASA,IAC7C4L,QAAQtN,IAAc,kBAAC,EAAD,CAAkBA,UAAWA,MAMpE,IAAMuN,EAAUC,YACZE,cACAoF,KAGWvF,YAAQyB","file":"static/js/7.dafb8584.chunk.js","sourcesContent":["/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Animation from '../Message/Media/Animation';\r\nimport './StickerPreview.css';\r\n\r\nclass AnimationPreview extends React.Component {\r\n    render() {\r\n        const { animation } = this.props;\r\n        if (!animation) return null;\r\n\r\n        return (\r\n            <div className='sticker-preview'>\r\n                <Animation\r\n                    type='preview'\r\n                    stretch={true}\r\n                    animation={animation}\r\n                    style={{ borderRadius: 0 }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAnimationPreview.propTypes = {\r\n    animation: PropTypes.object\r\n};\r\n\r\nexport default AnimationPreview;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\r\nimport './StickerSet.css';\r\n\r\nclass StickerSet extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { info } = this.props;\r\n\r\n        if (info !== nextProps.info) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\r\n        if (!info) return null;\r\n\r\n        const { title, stickers } = info;\r\n\r\n        const items = stickers.map((x, i) => (\r\n            <div\r\n                className='sticker-set-item'\r\n                key={x.sticker.id}\r\n                data-sticker-id={x.sticker.id}\r\n                onClick={() => onSelect(x)}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseDown={onMouseDown}\r\n                style={{\r\n                    width: STICKER_SMALL_DISPLAY_SIZE,\r\n                    height: STICKER_SMALL_DISPLAY_SIZE\r\n                }}>\r\n                <Sticker\r\n                    key={x.sticker.id}\r\n                    sticker={x}\r\n                    autoplay={false}\r\n                    blur={false}\r\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE}\r\n                    preview\r\n                    source={StickerSourceEnum.PICKER}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className='sticker-set'>\r\n                <div className='sticker-set-title'>\r\n                    <div className='sticker-set-title-wrapper'>\r\n                        <span>{title}</span>\r\n                    </div>\r\n                    {onDeleteClick && (\r\n                        <IconButton\r\n                            aria-label='delete'\r\n                            classes={{ root: 'sticker-set-icon-root' }}\r\n                            size='small'\r\n                            onClick={onDeleteClick}>\r\n                            <ClearIcon fontSize='inherit' />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n                <div className='sticker-set-content'>{items}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickerSet.propTypes = {\r\n    info: PropTypes.object.isRequired,\r\n    onSelect: PropTypes.func.isRequired,\r\n    onMouseDown: PropTypes.func.isRequired,\r\n    onDeleteClick: PropTypes.func\r\n};\r\n\r\nexport default StickerSet;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport Animator from '../../Utils/Animatior';\r\nimport Sticker from './../Message/Media/Sticker';\r\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport './StickersPickerHeader.css';\r\n\r\nclass StickersPickerHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.anchorRef = React.createRef();\r\n\r\n        this.state = { position: 0 };\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    onClientUpdateStickerSetPosition = update => {\r\n        const { position } = update;\r\n\r\n        // console.log('[header] setPosition', position);\r\n        this.setState({ position });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.position !== this.state.position) {\r\n            this.scrollToPosition();\r\n        }\r\n    }\r\n\r\n    scrollToPosition = () => {\r\n        const { position } = this.state;\r\n        const { animator, anchorRef, scrollRef } = this;\r\n\r\n        const scroll = scrollRef.current;\r\n        const anchor = anchorRef.current;\r\n        const anchorNode = ReactDOM.findDOMNode(anchor);\r\n\r\n        const scrollFrom = scroll.scrollLeft;\r\n        const scrollTo = position * 48 - 147;\r\n\r\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\r\n        const anchorTo = position * 48;\r\n\r\n        if (animator) {\r\n            animator.stop();\r\n        }\r\n\r\n        this.animator = new Animator(0, [\r\n            {\r\n                from: scrollFrom,\r\n                to: scrollTo,\r\n                func: left => (scroll.scrollLeft = left)\r\n            },\r\n            {\r\n                from:\r\n                    Math.abs(anchorTo - anchorFrom) > 338\r\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\r\n                        : anchorFrom,\r\n                to: anchorTo,\r\n                func: left => (anchorNode.style.left = left + 'px')\r\n            }\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n            if (!this.animator) return;\r\n\r\n            this.animator.start();\r\n        }, 0);\r\n        // this.animator.start();\r\n    };\r\n\r\n    handleWheel = event => {\r\n        const { scrollRef } = this;\r\n\r\n        if (event.deltaX === 0) {\r\n            const scroll = scrollRef.current;\r\n\r\n            scroll.scrollLeft += event.deltaY;\r\n        }\r\n    };\r\n\r\n    handleSelect = sticker => {\r\n        const { stickers, onSelect } = this.props;\r\n\r\n        // console.log('[header] handleSelect', stickers.indexOf(sticker));\r\n        onSelect(stickers.indexOf(sticker));\r\n    };\r\n\r\n    render() {\r\n        const { recent, stickers } = this.props;\r\n\r\n        const recentItem = recent ?\r\n            <div\r\n                className='stickers-picker-header-recent'\r\n                onClick={() => this.handleSelect('recent')}>\r\n                <AccessTimeIcon/>\r\n            </div> :\r\n            null;\r\n\r\n        const items = stickers.map(x => (\r\n            <Sticker\r\n                key={x.sticker.id}\r\n                className='stickers-picker-header-sticker'\r\n                sticker={x}\r\n                play={false}\r\n                autoplay={false}\r\n                blur={false}\r\n                displaySize={36}\r\n                preview\r\n                source={StickerSourceEnum.PICKER_HEADER}\r\n                openMedia={() => this.handleSelect(x)}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div className='stickers-picker-header'>\r\n                <div ref={this.scrollRef} className={classNames('stickers-picker-header-scroll', 'scrollbars-hidden')} onWheel={this.handleWheel}>\r\n                    <div className='stickers-picker-header-items'>\r\n                        {recentItem}\r\n                        {items}\r\n                    </div>\r\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPickerHeader.propTypes = {\r\n    recent: PropTypes.object,\r\n    stickers: PropTypes.array.isRequired,\r\n    onSelect: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StickersPickerHeader;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { compose } from '../../Utils/HOC';\r\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\r\nimport { withTranslation } from 'react-i18next';\r\nimport StickerSet from './StickerSet';\r\nimport StickersPickerHeader from './StickersPickerHeader';\r\nimport { debounce, throttle } from '../../Utils/Common';\r\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\r\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './StickersPicker.css';\r\n\r\nclass StickersPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.itemsMap = new Map();\r\n        this.loadedSets = new Map();\r\n\r\n        this.state = {\r\n            recent: null,\r\n            stickerSets: null,\r\n            sets: [],\r\n            headerStickers: [],\r\n            position: 0\r\n        };\r\n\r\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\r\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\r\n        this.updatePosition = throttle(this.updatePosition, 250);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\r\n\r\n        if (nextState.recent !== recent) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.stickerSets !== stickerSets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.sets !== sets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.showPreview !== showPreview) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.position !== position) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    stop() {\r\n\r\n    }\r\n\r\n    onUpdateInstalledStickerSets = update => {\r\n        const { is_masks, sticker_set_ids } = update;\r\n        if (!is_masks) return;\r\n\r\n        this.filterSets();\r\n    };\r\n\r\n    onUpdateRecentStickers = update => {\r\n        this.reloadRecentContent();\r\n    };\r\n\r\n    filterSets(sticker_set_ids) {\r\n        const { sets, stickerSets } = this.state;\r\n    }\r\n\r\n    async reloadRecentContent() {\r\n        const recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.setState({\r\n            recent\r\n        });\r\n    }\r\n\r\n    scrollTop = () => {\r\n        this.scrollRef.current.scrollTop = 0;\r\n    };\r\n\r\n    loadContent = async (recent, stickerSets, sets) => {\r\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\r\n\r\n        if (!recent) {\r\n            recent = await TdLibController.send({\r\n                '@type': 'getRecentStickers',\r\n                is_attached: false\r\n            });\r\n        }\r\n\r\n        if (!sets) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getInstalledStickerSets',\r\n                is_masks: false\r\n            });\r\n\r\n            const promises = [];\r\n            result.sets.forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            sets = await Promise.all(promises);\r\n        }\r\n\r\n        const slicedSets = sets.slice(0, 5);\r\n        const headerStickers = sets.reduce((preview, set) => {\r\n            if (set.stickers.length > 0) {\r\n                preview.push(set.stickers[0]);\r\n            }\r\n            return preview;\r\n        }, []);\r\n\r\n        this.setState({\r\n            recent,\r\n            stickerSets,\r\n            sets: slicedSets,\r\n            fullSets: sets,\r\n            headerStickers\r\n        });\r\n        this.setsLength = slicedSets.length;\r\n    };\r\n\r\n    loadInViewContentOnScroll = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContentOnScrollEnd = () => {\r\n        this.loadInViewContent(400);\r\n    };\r\n\r\n    loadInViewContent = (padding = 0) => {\r\n        // console.log('[sp] loadInViewContent');\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { sets } = this.state;\r\n\r\n        const inViewItems = [];\r\n        sets.forEach(x => {\r\n            const item = this.itemsMap.get(x.id);\r\n            const node = ReactDOM.findDOMNode(item);\r\n            if (node) {\r\n                const topBorder = scroll.scrollTop - padding;\r\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\r\n\r\n                const nodeTop = node.offsetTop;\r\n                const nodeBottom = node.offsetTop + node.clientHeight;\r\n\r\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        inViewItems.forEach(x => {\r\n            const store = FileStore.getStore();\r\n            if (!this.loadedSets.has(x.id)) {\r\n                this.loadedSets.set(x.id, x.id);\r\n                loadStickerSetContent(store, x);\r\n            }\r\n        });\r\n    };\r\n\r\n    updatePosition = () => {\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { recent, sets } = this.state;\r\n        let minDiff = scroll.scrollHeight;\r\n        let position = 0;\r\n        let startPosition = 0;\r\n        if (recent && recent.stickers.length > 0) {\r\n            startPosition = 1;\r\n            const element = this.itemsMap.get('recent');\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node && node.offsetTop <= scroll.scrollTop) {\r\n                    const offsetTop = node.offsetTop;\r\n                    if (node && offsetTop <= scroll.scrollTop) {\r\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\r\n                        if (diff <= minDiff) {\r\n                            minDiff = diff;\r\n                            position = 0;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        sets.forEach((x, pos) => {\r\n            const element = this.itemsMap.get(x.id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node && node.offsetTop <= scroll.scrollTop) {\r\n                    const offsetTop = node.offsetTop;\r\n                    if (node) {\r\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\r\n                        if (diff <= minDiff) {\r\n                            minDiff = diff;\r\n                            position = startPosition + pos;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSetPosition',\r\n            position\r\n        });\r\n    };\r\n\r\n    handleScroll = async () => {\r\n        this.scrolling = true;\r\n        const now = new Date();\r\n        this.lastScrollTime = now;\r\n        if (this.scrollTimer) clearTimeout(this.scrollTimer);\r\n        this.scrollTimer = setTimeout(() => {\r\n            if (now !== this.lastScrollTime) return;\r\n\r\n            this.scrolling = false;\r\n        }, 250);\r\n\r\n        // console.log('[sp] handleScroll');\r\n        //this.loadInViewContentOnScroll();\r\n        this.loadInViewContentOnScrollEnd();\r\n        this.updatePosition();\r\n\r\n        const scroll = this.scrollRef.current;\r\n\r\n        if (this.loadingChunk) return;\r\n\r\n        let loadChunk = false;\r\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\r\n            loadChunk = true;\r\n        }\r\n\r\n        if (!loadChunk) {\r\n            return false;\r\n        }\r\n\r\n        const { sets, stickerSets } = this.state;\r\n        if (stickerSets.sets.length === sets.length) return;\r\n\r\n        this.loadingChunk = true;\r\n        const promises = [];\r\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        const result = await Promise.all(promises).finally(() => {\r\n            this.loadingChunk = false;\r\n        });\r\n\r\n        this.setsLength += result.length;\r\n        this.setState({ sets: sets.concat(result) });\r\n    };\r\n\r\n    loadPreviewContent = stickerId => {\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        if (!sticker) return;\r\n\r\n        const store = FileStore.getStore();\r\n        loadStickerContent(store, sticker, null);\r\n\r\n        const stickersPerRow = 5;\r\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\r\n        preloadStickers.forEach(x => {\r\n            loadStickerContent(store, x, null);\r\n        });\r\n    };\r\n\r\n    handleMouseEnter = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        if (!this.mouseDown) return;\r\n\r\n        if (this.mouseDownStickerId !== stickerId) {\r\n            this.mouseDownStickerId = null;\r\n        }\r\n        this.setState({ previewStickerId: stickerId });\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        const { onPreview } = this.props;\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        onPreview(sticker);\r\n    };\r\n\r\n    handleMouseDown = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        this.mouseDownStickerId = stickerId;\r\n        const now = Date.now();\r\n\r\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\r\n        setTimeout(() => {\r\n            const { timestamp } = this.state;\r\n            if (timestamp === now) {\r\n                this.setState({ showPreview: true, cancelSend: true }, () => {\r\n                    const { onPreview } = this.props;\r\n                    const { recent, sets } = this.state;\r\n\r\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n                    onPreview(sticker);\r\n                });\r\n            }\r\n        }, 500);\r\n\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        this.mouseDown = true;\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\r\n\r\n        const { onPreview } = this.props;\r\n\r\n        onPreview(null);\r\n\r\n        this.mouseDown = false;\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n    };\r\n\r\n    handleStickerSelect = sticker => {\r\n        const { onSelect } = this.props;\r\n        const { cancelSend } = this.state;\r\n\r\n        if (cancelSend) return;\r\n\r\n        onSelect(sticker);\r\n    };\r\n\r\n    handleSelectSet = async position => {\r\n        const { sets, stickerSets } = this.state;\r\n        const { scrollRef } = this;\r\n\r\n        if (position === -1) {\r\n            const scroll = scrollRef.current;\r\n            scroll.scrollTop = 0;\r\n        } else if (position < sets.length) {\r\n            const element = this.itemsMap.get(sets[position].id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node) {\r\n                    const scroll = scrollRef.current;\r\n                    scroll.scrollTop = node.offsetTop;\r\n                }\r\n            }\r\n        } else if (position < stickerSets.sets.length) {\r\n            if (this.loadingChunk) return;\r\n            if (stickerSets.sets.length === sets.length) return;\r\n\r\n            this.loadingChunk = true;\r\n            const promises = [];\r\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\r\n\r\n            this.setsLength += result.length;\r\n            let concatSets = sets.concat(result);\r\n            this.setState({ sets: concatSets }, () => {\r\n                if (position < concatSets.length) {\r\n                    this.handleSelectSet(position);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDeleteRecent = () => {\r\n        TdLibController.send({\r\n            '@type': 'clearRecentStickers',\r\n            is_attached: false\r\n        });\r\n    };\r\n\r\n    handleDeleteStickerSet = id => {\r\n        TdLibController.send({\r\n            '@type': 'changeStickerSet',\r\n            set_id: id,\r\n            is_installed: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { t, style } = this.props;\r\n        const { recent, stickerSets, sets, headerStickers } = this.state;\r\n        // console.log('[sp] render', recent, stickerSets, sets);\r\n        // if (!stickerSets) return null;\r\n        //\r\n        // if (!sets) return null;\r\n        // if (!sets.length) return null;\r\n\r\n        this.itemsMap.clear();\r\n        const items = sets.map(x => (\r\n            <StickerSet\r\n                key={x.id}\r\n                ref={el => this.itemsMap.set(x.id, el)}\r\n                info={x}\r\n                onSelect={this.handleStickerSelect}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseEnter={this.handleMouseEnter}\r\n            />\r\n        ));\r\n\r\n        const recentInfo =\r\n            recent && recent.stickers.length > 0\r\n                ? {\r\n                      stickers: recent.stickers,\r\n                      title: t('RecentStickers')\r\n                  }\r\n                : null;\r\n\r\n        return (\r\n            <div className='stickers-picker' style={style}>\r\n                <StickersPickerHeader\r\n                    recent={recentInfo}\r\n                    stickers={headerStickers}\r\n                    onSelect={this.handleSelectSet} />\r\n                <div ref={this.scrollRef} className={classNames('stickers-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\r\n                    {Boolean(recentInfo) && (\r\n                        <StickerSet\r\n                            ref={el => this.itemsMap.set('recent', el)}\r\n                            info={recentInfo}\r\n                            onSelect={this.handleStickerSelect}\r\n                            onMouseDown={this.handleMouseDown}\r\n                            onMouseEnter={this.handleMouseEnter}\r\n                            onDeleteClick={this.handleDeleteRecent}\r\n                        />\r\n                    )}\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPicker.propTypes = {\r\n    onSelect: PropTypes.func.isRequired,\r\n    onPreview: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    withSaveRef(),\r\n    withTranslation(),\r\n    withRestoreRef()\r\n);\r\n\r\nexport default enhance(StickersPicker);\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ReactDOM from 'react-dom';\r\nimport classNames from 'classnames';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\r\nimport Animation from '../Message/Media/Animation';\r\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\r\nimport { compareMaps, debounce, throttle } from '../../Utils/Common';\r\nimport AnimationStore from '../../Stores/AnimationStore';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './GifsPicker.css'\r\n\r\nclass GifsPicker extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n\r\n        this.itemsMap = new Map();\r\n\r\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\r\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\r\n    }\r\n\r\n    start() {\r\n        this.loadInViewContent();\r\n    }\r\n\r\n    stop() {\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationsInView',\r\n            animations: new Map()\r\n        })\r\n    }\r\n\r\n    handleScroll = event => {\r\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\r\n\r\n        this.loadInViewContentOnScrollEnd();\r\n\r\n        const begin = scrollTop <= 10;\r\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\r\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\r\n\r\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\r\n        this.prevScrollTop = scrollTop;\r\n        if (cancel) {\r\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\r\n            return;\r\n        }\r\n\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    scrollTop = () => {\r\n        this.scrollRef.current.scrollTop = 0;\r\n    };\r\n\r\n    async loadContent() {\r\n        // console.log('[gp] loadContent');\r\n\r\n        let { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getSavedAnimations'\r\n            });\r\n\r\n            AnimationStore.savedAnimations = result;\r\n            savedAnimations = result;\r\n\r\n            this.forceUpdate(() => {\r\n                this.start();\r\n            });\r\n        }\r\n\r\n        // load content\r\n        const store = FileStore.getStore();\r\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\r\n\r\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\r\n        previewAnimations.forEach(x => {\r\n            loadAnimationThumbnailContent(store, x, null);\r\n            loadAnimationContent(store, x, null, false);\r\n        });\r\n    }\r\n\r\n    loadInViewContentOnScroll = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContentOnScrollEnd = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContent = (padding = 0) => {\r\n        // console.log('[gp] loadInViewContent');\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) return;\r\n\r\n        const { animations } = savedAnimations;\r\n\r\n        const inViewMap = new Map();\r\n        const inViewIndexes = [];\r\n        animations.forEach((x, index) => {\r\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\r\n            const node = ReactDOM.findDOMNode(item);\r\n            if (node) {\r\n                const topBorder = scroll.scrollTop - padding;\r\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\r\n\r\n                const nodeTop = node.offsetTop;\r\n                const nodeBottom = node.offsetTop + node.clientHeight;\r\n\r\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\r\n                    inViewMap.set(x, x);\r\n                    inViewIndexes.push(index);\r\n                }\r\n            }\r\n        });\r\n\r\n        const { animationsInView } = AnimationStore;\r\n        if (compareMaps(animationsInView, inViewMap)) {\r\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\r\n            return;\r\n        }\r\n\r\n\r\n        // console.log('[gp] inViewItems', inViewIndexes);\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationsInView',\r\n            animations: inViewMap\r\n        })\r\n\r\n        // inViewItems.forEach(x => {\r\n        //     const store = FileStore.getStore();\r\n        //     if (!this.loadedSets.has(x.id)) {\r\n        //         this.loadedSets.set(x.id, x.id);\r\n        //         loadStickerSetContent(store, x);\r\n        //     }\r\n        // });\r\n    };\r\n\r\n    handleMouseDown = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\r\n\r\n        this.mouseDownStickerId = stickerId;\r\n        const now = Date.now();\r\n\r\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\r\n        setTimeout(() => {\r\n            const { timestamp } = this.state;\r\n            if (timestamp === now) {\r\n                this.setState({ showPreview: true, cancelSend: true }, () => {\r\n                    const { onPreview } = this.props;\r\n                    const { recent, sets } = this.state;\r\n\r\n                    const { savedAnimations } = AnimationStore;\r\n\r\n                    const sticker = savedAnimations.animations[stickerId];\r\n                    onPreview(sticker);\r\n                });\r\n            }\r\n        }, 500);\r\n\r\n        // this.loadPreviewContent(stickerId);\r\n\r\n        this.mouseDown = true;\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    handleMouseEnter = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\r\n\r\n        if (!this.mouseDown) return;\r\n\r\n        if (this.mouseDownStickerId !== stickerId) {\r\n            this.mouseDownStickerId = null;\r\n        }\r\n        this.setState({ previewStickerId: stickerId });\r\n        // this.loadPreviewContent(stickerId);\r\n\r\n        const { onPreview } = this.props;\r\n        const { savedAnimations } = AnimationStore;\r\n\r\n        const sticker = savedAnimations.animations[stickerId];\r\n        onPreview(sticker);\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\r\n\r\n        const { onPreview } = this.props;\r\n\r\n        onPreview(null);\r\n\r\n        this.mouseDown = false;\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n    };\r\n\r\n    openAnimation = animation => {\r\n        const { onSelect } = this.props;\r\n        const { cancelSend } = this.state;\r\n\r\n        if (cancelSend) return;\r\n\r\n        onSelect(animation);\r\n    };\r\n\r\n    render() {\r\n        const { t, style } = this.props;\r\n        const { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) return null;\r\n\r\n        this.itemsMap.clear();\r\n        const items = savedAnimations.animations.map((x, index) => (\r\n            <div\r\n                data-animation-index={index}\r\n                key={`${index}_${x.animation.id}`}\r\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseEnter={this.handleMouseEnter}\r\n                >\r\n                <Animation\r\n                    type='picker'\r\n                    animation={x}\r\n                    openMedia={() => this.openAnimation(x)}\r\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className='gifs-picker' style={style}>\r\n                <div ref={this.scrollRef} className={classNames('gifs-picker-scroll', 'scrollbars-hidden')} onScroll={this.handleScroll}>\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nGifsPicker.propTypes = {\r\n    onSelect: PropTypes.func.isRequired,\r\n    onPreview: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    withSaveRef(),\r\n    withTranslation(),\r\n    withRestoreRef()\r\n);\r\n\r\nexport default enhance(GifsPicker);","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\nimport { compose } from '../../Utils/HOC';\r\nimport withTheme from '@material-ui/core/styles/withTheme';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\r\nimport { Picker as EmojiPicker } from 'emoji-mart';\r\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\r\n// import data from 'emoji-mart/data/messenger.json'\r\nimport AnimationPreview from './AnimationPreview';\r\nimport StickerPreview from './StickerPreview';\r\nimport StickersPicker from './StickersPicker';\r\nimport GifsPicker from './GifsPicker';\r\nimport { isAppleDevice } from '../../Utils/Common';\r\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\r\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\r\nimport AnimationStore from '../../Stores/AnimationStore';\r\nimport AppStore from '../../Stores/ApplicationStore';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport LocalizationStore from '../../Stores/LocalizationStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './EmojiPickerButton.css';\r\n\r\nclass EmojiPickerButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            tab: 0\r\n        };\r\n\r\n        this.emojiPickerRef = React.createRef();\r\n        this.stickersPickerRef = React.createRef();\r\n        this.gifsPickerRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    onClientUpdateChange = update => {\r\n        const { open } = this.state;\r\n\r\n        if (open) {\r\n            this.removePicker = true;\r\n        } else {\r\n            this.picker = null;\r\n        }\r\n    };\r\n\r\n    handleButtonMouseEnter = event => {\r\n        this.buttonEnter = true;\r\n        setTimeout(() => {\r\n            if (!this.buttonEnter) return;\r\n\r\n            this.updatePicker(true);\r\n            this.loadStickerSets();\r\n            this.loadSavedAnimations();\r\n\r\n            if (this.state.tab === 2) {\r\n                const gifsPicker = this.gifsPickerRef.current;\r\n                if (gifsPicker) {\r\n                    gifsPicker.start();\r\n                }\r\n            }\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    loadSavedAnimations = async () => {\r\n        let { savedAnimations } = AnimationStore;\r\n        if (!savedAnimations) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getSavedAnimations'\r\n            });\r\n\r\n            AnimationStore.savedAnimations = result;\r\n            savedAnimations = result;\r\n        }\r\n\r\n        // load content\r\n        const store = FileStore.getStore();\r\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\r\n\r\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\r\n        previewAnimations.forEach(x => {\r\n            loadAnimationThumbnailContent(store, x);\r\n        });\r\n    };\r\n\r\n    loadStickerSets = async () => {\r\n        if (this.sets) return;\r\n\r\n        this.recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.stickerSets = await TdLibController.send({\r\n            '@type': 'getInstalledStickerSets',\r\n            is_masks: false\r\n        });\r\n\r\n        const promises = [];\r\n        this.stickerSets.sets.forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        this.sets = await Promise.all(promises);\r\n\r\n        const node = this.stickersPickerRef.current;\r\n\r\n        const store = FileStore.getStore();\r\n        loadRecentStickersContent(store, this.recent);\r\n\r\n        const previewSets = this.sets.slice(0, 5).reverse();\r\n        previewSets.forEach(x => {\r\n            loadStickerSetContent(store, x);\r\n            node.loadedSets.set(x.id, x.id);\r\n        });\r\n\r\n        const previewStickers = this.sets.reduce((stickers, set) => {\r\n            if (set.stickers.length > 0) {\r\n                stickers.push(set.stickers[0]);\r\n            }\r\n            return stickers;\r\n        }, []);\r\n        previewStickers.forEach(x => {\r\n            loadStickerThumbnailContent(store, x);\r\n        });\r\n    };\r\n\r\n    handleButtonMouseLeave = () => {\r\n        this.buttonEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    tryClosePicker = () => {\r\n        // return;\r\n\r\n        const { animation, sticker } = this.state;\r\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handlePaperMouseEnter = () => {\r\n        this.paperEnter = true;\r\n    };\r\n\r\n    handlePaperMouseLeave = () => {\r\n        // return;\r\n\r\n        this.paperEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    updatePicker = open => {\r\n        this.setState({ open }, () => {\r\n            if (!this.state.open) {\r\n                if (this.removePicker) {\r\n                    this.picker = null;\r\n                    this.removePicker = false;\r\n                }\r\n\r\n                const gifsPicker = this.gifsPickerRef.current;\r\n                if (gifsPicker) {\r\n                    gifsPicker.stop();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    handleEmojiClick = () => {\r\n        this.setState({ tab: 0 });\r\n\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        if (gifsPicker) {\r\n            gifsPicker.stop();\r\n        }\r\n\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        if (stickersPicker) {\r\n            stickersPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleStickersClick = () => {\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        const { tab } = this.state;\r\n\r\n        // console.log('[sp] handleStickersClick');\r\n\r\n        if (tab === 1) {\r\n            if (stickersPicker) {\r\n                stickersPicker.scrollTop();\r\n            }\r\n        } else {\r\n            setTimeout(() => {\r\n                // console.log('[sp] handleStickersClick.loadContent');\r\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\r\n            }, 150);\r\n\r\n            this.setState({ tab: 1 });\r\n        }\r\n\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        if (gifsPicker) {\r\n            gifsPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleGifsClick = () => {\r\n        const gifsPicker = this.gifsPickerRef.current;\r\n        const { tab } = this.state;\r\n\r\n        if (tab === 2) {\r\n            if (gifsPicker) {\r\n                gifsPicker.scrollTop();\r\n            }\r\n        } else {\r\n            const { savedAnimations } = AnimationStore;\r\n\r\n            setTimeout(() => {\r\n                gifsPicker.loadContent(savedAnimations);\r\n                gifsPicker.start();\r\n            }, 150);\r\n\r\n            this.setState({ tab: 2 });\r\n        }\r\n\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        if (stickersPicker) {\r\n            stickersPicker.stop();\r\n        }\r\n    };\r\n\r\n    handleStickerSend = sticker => {\r\n        if (!sticker) return;\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSend',\r\n            sticker\r\n        });\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handleStickerPreview = sticker => {\r\n        this.setState({ sticker });\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerPreview',\r\n            sticker\r\n        });\r\n\r\n        if (!sticker) {\r\n            this.tryClosePicker();\r\n        }\r\n    };\r\n\r\n    handleGifSend = animation => {\r\n        if (!animation) return;\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationSend',\r\n            animation\r\n        });\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handleGifPreview = animation => {\r\n        this.setState({ animation });\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateAnimationPreview',\r\n            animation\r\n        });\r\n\r\n        if (!animation) {\r\n            this.tryClosePicker();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { theme, t } = this.props;\r\n        const { open, tab, animation, sticker } = this.state;\r\n\r\n        if (open && !this.picker) {\r\n            const i18n = {\r\n                search: t('Search'),\r\n                notfound: t('NotEmojiFound'),\r\n                skintext: t('ChooseDefaultSkinTone'),\r\n                categories: {\r\n                    search: t('SearchResults'),\r\n                    recent: t('Recent'),\r\n                    people: t('SmileysPeople'),\r\n                    nature: t('AnimalsNature'),\r\n                    foods: t('FoodDrink'),\r\n                    activity: t('Activity'),\r\n                    places: t('TravelPlaces'),\r\n                    objects: t('Objects'),\r\n                    symbols: t('Symbols'),\r\n                    flags: t('Flags'),\r\n                    custom: t('Custom')\r\n                }\r\n            };\r\n\r\n            this.picker = (\r\n                <EmojiPicker\r\n                    ref={this.emojiPickerRef}\r\n                    // data={data}\r\n                    set='apple'\r\n                    showPreview={false}\r\n                    showSkinTones={false}\r\n                    onSelect={this.props.onSelect}\r\n                    color={theme.palette.primary.dark}\r\n                    i18n={i18n}\r\n                    native={isAppleDevice()}\r\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\r\n                />\r\n            );\r\n\r\n            this.stickersPicker = (\r\n                <StickersPicker\r\n                    ref={this.stickersPickerRef}\r\n                    onSelect={this.handleStickerSend}\r\n                    onPreview={this.handleStickerPreview}\r\n                    style={{ position: 'absolute', left: 338, top: 0 }}\r\n                />\r\n            );\r\n\r\n            this.gifsPicker = (\r\n                <GifsPicker\r\n                    ref={this.gifsPickerRef}\r\n                    onSelect={this.handleGifSend}\r\n                    onPreview={this.handleGifPreview}\r\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <link\r\n                    rel='stylesheet'\r\n                    type='text/css'\r\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\r\n                />\r\n                <IconButton\r\n                    className='inputbox-icon-button'\r\n                    aria-label='Emoticon'\r\n                    onMouseEnter={this.handleButtonMouseEnter}\r\n                    onMouseLeave={this.handleButtonMouseLeave}>\r\n                    <InsertEmoticonIcon />\r\n                </IconButton>\r\n                <div\r\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\r\n                    onMouseEnter={this.handlePaperMouseEnter}\r\n                    onMouseLeave={this.handlePaperMouseLeave}>\r\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\r\n                        {this.picker}\r\n                        {this.stickersPicker}\r\n                        {this.gifsPicker}\r\n                    </div>\r\n                    <div className='emoji-picker-header'>\r\n                        <Button\r\n                            color={tab === 0 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleEmojiClick}>\r\n                            {t('Emoji')}\r\n                        </Button>\r\n                        <Button\r\n                            color={tab === 1 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleStickersClick}>\r\n                            {t('AccDescrStickers')}\r\n                        </Button>\r\n                        <Button\r\n                            color={tab === 2 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleGifsClick}>\r\n                            {t('AttachGif')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                {Boolean(sticker) && <StickerPreview sticker={sticker} />}\r\n                {Boolean(animation) && <AnimationPreview animation={animation} />}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst enhance = compose(\r\n    withTranslation(),\r\n    withTheme\r\n);\r\n\r\nexport default enhance(EmojiPickerButton);\r\n"],"sourceRoot":""}